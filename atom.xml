<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tkqubo&#39;s blog</title>
  <subtitle>you ain&#39;t hacked nothin&#39; yet</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tkqubo.github.io/"/>
  <updated>2016-05-30T01:08:10.000Z</updated>
  <id>https://tkqubo.github.io/</id>
  
  <author>
    <name>tkqubo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A casual trip to the Monad, through Scalaz</title>
    <link href="https://tkqubo.github.io/2016/05/30/a-casual-trip-to-the-monad-through-scalaz/"/>
    <id>https://tkqubo.github.io/2016/05/30/a-casual-trip-to-the-monad-through-scalaz/</id>
    <published>2016-05-29T19:31:20.000Z</published>
    <updated>2016-05-30T01:08:10.000Z</updated>
    
    <content type="html">&lt;p&gt;We had a &lt;a href=&quot;http://reactive-programming-with-scala-and-akka.connpass.com/event/31710/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meetup&lt;/a&gt; reading 2nd chapter of &lt;a href=&quot;http://www.amazon.com/gp/product/1783984341/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783984341&amp;linkCode=as2&amp;tag=tkqubo-20&amp;linkId=3DD3AV3FBDD6745N&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Programming with Scala and Akka&lt;/a&gt;&lt;img src=&quot;https://ir-na.amazon-adsystem.com/e/ir?t=tkqubo-20&amp;l=as2&amp;o=1&amp;a=1783984341&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot;&gt; last Friday.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1783984341/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783984341&amp;linkCode=as2&amp;tag=tkqubo-20&amp;linkId=JASVNACQ5LY5DXPL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=1783984341&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=tkqubo-20&quot;&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-na.amazon-adsystem.com/e/ir?t=tkqubo-20&amp;l=as2&amp;o=1&amp;a=1783984341&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first half of this chapter explains what is functional programming in Scala.  And the latter, through one of the most popular Scala library called &lt;a href=&quot;https://github.com/scalaz/scalaz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scalaz&lt;/a&gt;, the important concepts in functional programming; Functors, Applicative Functors, and Monads.&lt;/p&gt;
&lt;p&gt;In this blog post, I will explain about my shallow understanding of those three handsome guys.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: the below is not thorough nor correct definitions of those concepts at all.  It simply is a starting point for understanding them.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Functors-Applicative-Functors-and-Monads-for-the-first-step&quot;&gt;&lt;a href=&quot;#Functors-Applicative-Functors-and-Monads-for-the-first-step&quot; class=&quot;headerlink&quot; title=&quot;Functors, Applicative Functors, and Monads, for the first step&quot;&gt;&lt;/a&gt;Functors, Applicative Functors, and Monads, for the first step&lt;/h2&gt;&lt;p&gt;If you don’t know very much about functors, applicative functional, and monads (like me as a Scala newbie), maybe a table below could help understand them.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Who are you?&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;does what, mainly&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;in which method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;&lt;code&gt;Functor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;em&gt;map&lt;/em&gt;s a value &lt;code&gt;A&lt;/code&gt; in some &lt;em&gt;container &lt;code&gt;F&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;em&gt;&lt;code&gt;map[B](f: A =&amp;gt; B): F[B]&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;&lt;code&gt;Applicative&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;em&gt;applies&lt;/em&gt; a method &lt;code&gt;A =&amp;gt; B&lt;/code&gt; in some &lt;em&gt;container &lt;code&gt;F&lt;/code&gt;&lt;/em&gt; &lt;br&gt;to a value &lt;code&gt;A&lt;/code&gt; in another &lt;em&gt;container F&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;em&gt;&lt;code&gt;ap[A,B](f: =&amp;gt; F[A =&amp;gt; B]): F[B]&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;em&gt;flatMap&lt;/em&gt;s a value &lt;code&gt;A&lt;/code&gt; in some &lt;em&gt;container &lt;code&gt;F&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;em&gt;&lt;code&gt;bind[A, B](f: A =&amp;gt; F[B]): F[B]&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here, the word &lt;em&gt;container&lt;/em&gt; means kind of an abstraction of a way of holding value.  &lt;code&gt;Option&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Future&lt;/code&gt; are good examples of them in Scala language.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;type&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;how it holds value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;Option[T]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;holds a value of type &lt;code&gt;T&lt;/code&gt; (&lt;code&gt;Some(value)&lt;/code&gt;), or nothing (&lt;code&gt;None&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;List[T]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;holds multiple values of type &lt;code&gt;T&lt;/code&gt;.&lt;br&gt; (that is, &lt;em&gt;homogeneous collection&lt;/em&gt; of type &lt;code&gt;T&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;Future[T]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;holds some concurrent block that will eventually return&lt;br&gt;the value of type &lt;code&gt;T&lt;/code&gt;, or &lt;code&gt;Throwable&lt;/code&gt; as a failure result.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;NOTE: Strictly speaking, container should actually be called a &lt;code&gt;type class&lt;/code&gt;.  See &lt;a href=&quot;https://en.wikipedia.org/wiki/Type_class&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipaedia&lt;/a&gt; for further explanations.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And &lt;em&gt;Monad&lt;/em&gt;s &lt;code&gt;flatMap&lt;/code&gt; (or &lt;code&gt;bind&lt;/code&gt;), this &lt;em&gt;flatten&lt;/em&gt;s the nested container as a result of mapping.&lt;/p&gt;
&lt;p&gt;Anyway for better understandings let’s check out their implemtation in Scalaz’s source code with some examples.&lt;/p&gt;
&lt;h3 id=&quot;Implementations-amp-Examples&quot;&gt;&lt;a href=&quot;#Implementations-amp-Examples&quot; class=&quot;headerlink&quot; title=&quot;Implementations &amp;amp; Examples&quot;&gt;&lt;/a&gt;Implementations &amp;amp; Examples&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Functor&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// From Scalaz, details omitted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;](fa: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;])(f: &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Functor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]](&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FunctorOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_],&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;](&lt;span class=&quot;params&quot;&gt;val self: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;)(&lt;span class=&quot;params&quot;&gt;implicit val &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;](f: &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;.map(self)(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FunctorSyntax&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InvariantFunctorSyntax&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ToFunctorOps&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](v: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;FunctorOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;FunctorOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](v)(&lt;span class=&quot;type&quot;&gt;FunctorSyntax&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Examples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scalaz._, &lt;span class=&quot;type&quot;&gt;Scalaz&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;].map(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; to &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;_ + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// List(2, ..., 11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;].map(&lt;span class=&quot;type&quot;&gt;Some&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)) &amp;#123;_ + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Some(11)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Applicative (Applicative extends Apply)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// From Scalaz, details omitted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Apply&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Functor&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ap&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;](fa: =&amp;gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;])(f: =&amp;gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Applicative&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Apply&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;point&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](a: =&amp;gt; &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pure&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](a: =&amp;gt; &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] = point(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;](fa: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;])(f: &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;] = ap(fa)(point(f))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Applicative&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]](&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicativeOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_],&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;](&lt;span class=&quot;params&quot;&gt;val self: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;)(&lt;span class=&quot;params&quot;&gt;implicit val &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicativeSyntax&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplySyntax&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ToApplicativeOps&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](v: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;ApplicativeOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ApplicativeOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](v)(&lt;span class=&quot;type&quot;&gt;ApplicativeSyntax&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Examples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scalaz._, &lt;span class=&quot;type&quot;&gt;Scalaz&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;lt;*&amp;gt; &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&amp;#123;(_:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// List(3, 6, 12)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;lt;*&amp;gt; &amp;#123;(_:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;.point[&lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// List(3, 6, 12)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// when you want to apply functions at a time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; values = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; funcs1 = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&amp;#123;(_:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; funcs2 = &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;(&amp;#123;(_:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// verbose!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; resultUsingFlatMap: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    funcs1.flatMap &amp;#123; func1 =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      funcs2.flatMap &amp;#123; func2 =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        values.map &amp;#123; value =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          (func1 andThen func2)(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// concise!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; resultUsingFor: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value &amp;lt;- values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func1 &amp;lt;- funcs1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func2 &amp;lt;- funcs2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (func1 andThen func2)(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// more concise!?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;lt;*&amp;gt; is an alias for ap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; resultUsingApplicative: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  values &amp;lt;*&amp;gt; funcs1 &amp;lt;*&amp;gt; funcs2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Monad&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// From Scalaz, details omitted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bind&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Apply&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bind&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;](fa: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;])(f: &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ap&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;](fa: =&amp;gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;])(f: =&amp;gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Monad&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Applicative&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bind&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ap&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;](fa: =&amp;gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;])(f: =&amp;gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Monad&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]](&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MonadOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_],&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;](&lt;span class=&quot;params&quot;&gt;val self: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]&lt;/span&gt;)(&lt;span class=&quot;params&quot;&gt;implicit val &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MonadSyntax&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[_]] &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ApplicativeSyntax&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BindSyntax&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ToMonadOps&lt;/span&gt;&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](v: &lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;]): &lt;span class=&quot;type&quot;&gt;MonadOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;] =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;MonadOps&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;,&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;](v)(&lt;span class=&quot;type&quot;&gt;MonadSyntax&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;F&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Examples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scalaz._, &lt;span class=&quot;type&quot;&gt;Scalaz&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; value = &lt;span class=&quot;string&quot;&gt;&quot;126&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; map = &lt;span class=&quot;type&quot;&gt;Map&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;ten&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;the answer&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; toIntOption: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = value =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123; value.toInt.some &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; e: &lt;span class=&quot;type&quot;&gt;NumberFormatException&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;None&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; toDivBy3Option: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = value =&amp;gt; (value % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) ? (value / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).some | &lt;span class=&quot;type&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// verbose version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toIntOption(value).flatMap &amp;#123; intValue =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  toDivBy3Option(intValue).flatMap &amp;#123; divBy3Value =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map.get(divBy3Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for comprehension&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  intValue &amp;lt;- toIntOption(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  divBy3Value &amp;lt;- toDivBy3Option(intValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mappedValue &amp;lt;- map.get(divBy3Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; mappedValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// with sexy operators&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt;&amp;gt;= is an alias for bind&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;Option&lt;/span&gt;].point(value) &amp;gt;&amp;gt;= toIntOption &amp;gt;&amp;gt;= toDivBy3Option &amp;gt;&amp;gt;= map.get&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;But what are these &lt;code&gt;XxxOps&lt;/code&gt; and &lt;code&gt;XxxSyntax&lt;/code&gt;???  This is kind of what we call &lt;strong&gt;pimp my library&lt;/strong&gt; pattern in Scala, to add methods on target class or trait without modifying it, using the power of &lt;em&gt;implicit conversion&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Its basic structure in Scalaz can be simplified like this:&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Original&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OriginalOps&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;val self: &lt;span class=&quot;type&quot;&gt;Original&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;additionalMethod&lt;/span&gt; &lt;/span&gt;= ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Syntax&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ToOriginalOps&lt;/span&gt;&lt;/span&gt;(original: &lt;span class=&quot;type&quot;&gt;Original&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;OriginalOps&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;OriginalOps&lt;/span&gt;(original)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Syntax&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Syntax&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// usage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Syntax&lt;/span&gt;._&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; original = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Original&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;original.additionalMethod&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;By-the-way&quot;&gt;&lt;a href=&quot;#By-the-way&quot; class=&quot;headerlink&quot; title=&quot;By the way,&quot;&gt;&lt;/a&gt;By the way,&lt;/h2&gt;&lt;p&gt;Is there any easy good way to write some fancy operators like &lt;code&gt;&amp;quot;η&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;⊛&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;∘&amp;quot;&lt;/code&gt;, without simply copy-and-pasting them?   Once in a while I feel like to indulge in using them with a bit of fear about Gestaltzerfall…&lt;/p&gt;
&lt;h2 id=&quot;Other-helpful-resources&quot;&gt;&lt;a href=&quot;#Other-helpful-resources&quot; class=&quot;headerlink&quot; title=&quot;Other helpful resources&quot;&gt;&lt;/a&gt;Other helpful resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eed3si9n.com/learning-scalaz/scalaz-cheatsheet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://eed3si9n.com/learning-scalaz/scalaz-cheatsheet.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arosien/scalaz-cheatsheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/arosien/scalaz-cheatsheets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;For-those-who-want-to-dive-more-into-functional-programming…&quot;&gt;&lt;a href=&quot;#For-those-who-want-to-dive-more-into-functional-programming…&quot; class=&quot;headerlink&quot; title=&quot;For those who want to dive more into functional programming…&quot;&gt;&lt;/a&gt;For those who want to dive more into functional programming…&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://one-team.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oneteam Inc.&lt;/a&gt; is hiring a Scala engineer for server-side development.  Please visit &lt;a href=&quot;https://one-team.com/recruit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HERE&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;We had a &lt;a href=&quot;http://reactive-programming-with-scala-and-akka.connpass.com/event/31710/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meetup&lt;/a&gt; re
    
    </summary>
    
    
      <category term="Scala" scheme="https://tkqubo.github.io/tags/Scala/"/>
    
      <category term="ReactiveProgramming" scheme="https://tkqubo.github.io/tags/ReactiveProgramming/"/>
    
  </entry>
  
  <entry>
    <title>Reading Reactive Programming with Scala and Akka - Chapter 1</title>
    <link href="https://tkqubo.github.io/2016/05/12/reactive-programming-with-scala-and-akka-chapter-1/"/>
    <id>https://tkqubo.github.io/2016/05/12/reactive-programming-with-scala-and-akka-chapter-1/</id>
    <published>2016-05-12T01:00:00.000Z</published>
    <updated>2016-05-13T10:32:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Last week I held a small reading club to read &lt;a href=&quot;http://www.amazon.com/gp/product/1783984341/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783984341&amp;linkCode=as2&amp;tag=tkqubo-20&amp;linkId=3DD3AV3FBDD6745N&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Programming with Scala and Akka&lt;/a&gt;&lt;img src=&quot;https://ir-na.amazon-adsystem.com/e/ir?t=tkqubo-20&amp;l=as2&amp;o=1&amp;a=1783984341&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot;&gt;, written by Prasanna Kumar Sathyanarayanan and Suraj Atreya.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1783984341/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1783984341&amp;linkCode=as2&amp;tag=tkqubo-20&amp;linkId=JASVNACQ5LY5DXPL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=1783984341&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=tkqubo-20&quot;&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-na.amazon-adsystem.com/e/ir?t=tkqubo-20&amp;l=as2&amp;o=1&amp;a=1783984341&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The book contains a lot of exciting topics about Scala, Functional Programming, Reactive Programming, and Akka.  Thus highly recommended for anyone with Scala love.&lt;/p&gt;
&lt;p&gt;This time we read chapter 1, “Introducing Reactive Programming”.  And the below is what we’ve learned from there.&lt;/p&gt;
&lt;img src=&quot;/2016/05/12/reactive-programming-with-scala-and-akka-chapter-1/me.jpg&quot; alt=&quot;me.jpg&quot; title=&quot;&quot;&gt;
&lt;h2 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h2&gt;&lt;p&gt;This chapter largely contains these three parts, briefing the concept of reactive programming.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is Reactive Programming?&lt;/li&gt;
&lt;li&gt;Other stuffs around Reactive Programming&lt;/li&gt;
&lt;li&gt;Actual use case of Reactive Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;So-what-is-Reactive-Programming&quot;&gt;&lt;a href=&quot;#So-what-is-Reactive-Programming&quot; class=&quot;headerlink&quot; title=&quot;So what is Reactive Programming?&quot;&gt;&lt;/a&gt;So what is Reactive Programming?&lt;/h2&gt;&lt;p&gt;(Although this chapter is named &lt;em&gt;“Introducing Reactive Programming”&lt;/em&gt;, it rather seems to be explaining about Reactive Systems, or, Reactive Architecute?)&lt;/p&gt;
&lt;p&gt;Core ideas that support Reactive Programming are, according to the book:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Responsive&lt;/li&gt;
&lt;li&gt;Resilient / fault tolerant&lt;/li&gt;
&lt;li&gt;Scalable&lt;/li&gt;
&lt;li&gt;Message-driven&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The book illustrates these words one by one, among which I appreciated the explanation of the &lt;em&gt;resilience&lt;/em&gt;, where the author express &lt;em&gt;a failure as a first-class event&lt;/em&gt;.  This is more concrete and easy-to-understand rephrase of Akka’s “let it crash” philosophy.  Yes, we have to handle failures gracefully, instead of trying to kick out or suppress them, as if they were non-existent.&lt;/p&gt;
&lt;p&gt;For those 4 RP pillars above, these materials would be of great help&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.reactivemanifesto.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Reactive Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/stefanobaghino/the-reactive-manifesto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Reactive Manifesto by Stefano Baghino&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From them, we could additionally learn the difference between &lt;em&gt;scalable&lt;/em&gt; and &lt;em&gt;elastic&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Scalability&lt;/em&gt; itself, for example, can be achieved simply by engineer’s manually re-writing a config file and adding one new server to the load balancer.  But to achieve the &lt;em&gt;elasticity&lt;/em&gt;, those configuration must be done dynamically and automatically.  (see &lt;a href=&quot;http://www.reactivemanifesto.org/glossary#Elasticity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“Elasticity” in Glossary&lt;/a&gt; of the Reactive Manifesto)&lt;/p&gt;
&lt;p&gt;&lt;style&gt;.gutter { display: none; }&lt;/style&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;So something like this?&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;           +-                    +--------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Goal |              +----&amp;gt; |Responsiveness| &amp;lt;-----+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-             |      +--------------+       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          |             ^               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-       +-----+----+        |       +-------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           |        |Elasticity| &amp;lt;------------&amp;gt; |  Resilience / |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           |        +----------+        |       |Fault tolerance|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           |              ^             |       +---------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Principles |   +--------&amp;gt; |             |               ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           |   |          |             |               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           |   |    +-----+-----+       |               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           |   |    |Scalability|       |               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           |   |    +-----------+       |               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-  |          ^             |               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               |          |             |               |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-  | +--------+-------------+---------------+---------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method |   +-+     (Akka) Message−Driven architecture         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           +-    +------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Around-Reactive-Programming&quot;&gt;&lt;a href=&quot;#Around-Reactive-Programming&quot; class=&quot;headerlink&quot; title=&quot;Around Reactive Programming&quot;&gt;&lt;/a&gt;Around Reactive Programming&lt;/h2&gt;&lt;p&gt;Functional programming, asynchronous programming, data streams, microservices, and RESTful services…  Those terminologies are too much popular recently and I can hardly imagine a day without using those jargons in software engineers’ conversation.  But how are they related to Reactive Programming?&lt;/p&gt;
&lt;p&gt;In this multicore processor era, asynchronous programming paradigm is vital for creating reactive systems since single-threaded programming model cannot fully utilize all the cores.  Side-effect-free (pure) functional programming can make asynchronous programming easier.&lt;/p&gt;
&lt;p&gt;And from the software architecture perspective, when adhering to the principle of the Reactive Programming, the system can eventually form a microservice-like shape because microservice architecture too emphasize a system’s modularity, scalability, maintainability and resilience.  So in a sense, microservice architecture is sort of a realization of reactive architecture.  And RESTful interface can be very handy universal language for interaction between those modularized services.&lt;/p&gt;
&lt;h2 id=&quot;Use-cases&quot;&gt;&lt;a href=&quot;#Use-cases&quot; class=&quot;headerlink&quot; title=&quot;Use cases&quot;&gt;&lt;/a&gt;Use cases&lt;/h2&gt;&lt;p&gt;The book introduces two reactive applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IoT&lt;/li&gt;
&lt;li&gt;Tumblr’s architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the participants made an interesting remark on IoT that IoT devices themselves can construct a dense population as an Internet-connecting entities like us human beings.  Think about that with the outrageous growth of the number of the Internet users described in the beginning of this chapter, the amount of data flowing back and forth on the Internet will no doubt continue to increase.  To tackle with this problem, Reactive Programming must play the most important role in software engineering.&lt;/p&gt;
&lt;h2 id=&quot;A-thought-on-reading-technical-book-in-foreign-language-in-a-reading-circle&quot;&gt;&lt;a href=&quot;#A-thought-on-reading-technical-book-in-foreign-language-in-a-reading-circle&quot; class=&quot;headerlink&quot; title=&quot;A thought on reading technical book in foreign language in a reading circle&quot;&gt;&lt;/a&gt;A thought on reading technical book in foreign language in a reading circle&lt;/h2&gt;&lt;p&gt;As a non-native English speaker, I always find difficulty reading through technical materials written in English to the end.  But when we have somebody to study with, we can help each other and learn from each other, including outside the scope of the book.&lt;/p&gt;
&lt;p&gt;Thanks to this book, with catchy title and contents suitable for both beginners and intermediates of the Scala language, I felt that this very first time was successful.  I hope we can enjoy the following chapters, too.&lt;/p&gt;
&lt;h2 id=&quot;Others&quot;&gt;&lt;a href=&quot;#Others&quot; class=&quot;headerlink&quot; title=&quot;Others&quot;&gt;&lt;/a&gt;Others&lt;/h2&gt;&lt;h3 id=&quot;For-those-interested-in-the-book&quot;&gt;&lt;a href=&quot;#For-those-interested-in-the-book&quot; class=&quot;headerlink&quot; title=&quot;For those interested in the book:&quot;&gt;&lt;/a&gt;For those interested in the book:&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PACKT publishing&lt;/a&gt; is offering &lt;a href=&quot;https://www.packtpub.com/books/subscription/packtlib&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a subscription plan&lt;/a&gt;, where you can read any software books published by PACKT at a very reasonable price each month.  On top of that, yearly plan can include monthly tokens to &lt;strong&gt;freely&lt;/strong&gt; download any one digital book!  I will strongly recommend applying for this plan.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/packtlib&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.packtpub.com/packtlib&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;For-those-interested-in-software-development-with-Scala&quot;&gt;&lt;a href=&quot;#For-those-interested-in-software-development-with-Scala&quot; class=&quot;headerlink&quot; title=&quot;For those interested in software development with Scala:&quot;&gt;&lt;/a&gt;For those interested in software development with Scala:&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://one-team.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oneteam Inc.&lt;/a&gt; is now hiring server-side engineer.  Please visit &lt;a href=&quot;https://one-team.com/recruit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HERE&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Last week I held a small reading club to read &lt;a href=&quot;http://www.amazon.com/gp/product/1783984341/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creativ
    
    </summary>
    
    
      <category term="Scala" scheme="https://tkqubo.github.io/tags/Scala/"/>
    
      <category term="ReactiveProgramming" scheme="https://tkqubo.github.io/tags/ReactiveProgramming/"/>
    
  </entry>
  
  <entry>
    <title>init</title>
    <link href="https://tkqubo.github.io/2016/05/12/init/"/>
    <id>https://tkqubo.github.io/2016/05/12/init/</id>
    <published>2016-05-11T19:21:52.000Z</published>
    <updated>2016-05-11T19:46:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Hello-Xxxxx&quot;&gt;&lt;a href=&quot;#Hello-Xxxxx&quot; class=&quot;headerlink&quot; title=&quot;Hello Xxxxx&quot;&gt;&lt;/a&gt;Hello Xxxxx&lt;/h2&gt;&lt;p&gt;This is the first post of my blog.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hello-Xxxxx&quot;&gt;&lt;a href=&quot;#Hello-Xxxxx&quot; class=&quot;headerlink&quot; title=&quot;Hello Xxxxx&quot;&gt;&lt;/a&gt;Hello Xxxxx&lt;/h2&gt;&lt;p&gt;This is the first post of my blog.
    
    </summary>
    
    
  </entry>
  
</feed>
